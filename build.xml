<?xml version="1.0"?>
<project name="robotlegs-framework" basedir="." default="test">
	<!-- This is 100% ripped off from RobotLegs - http://github.com/darscan/robotlegs-framework.
   I am working on making my own but this one is so damn good I couldn't help myself. -->

	<!-- set up a prefix for all environment variables -->
	<property environment="env." />

	<!-- System environment must contain FLEX_HOME variable that points to Flex SDK
  <property name="FLEX_HOME" location="${env.FLEX_HOME}"/> -->

	<!-- identify properties file -->
	<property file="build.properties" />

	<!-- Set up FlexUnit Ant tasks -->
	<taskdef resource="flexUnitTasks.tasks" classpath="${lib.loc}/flexUnitTasks.jar" />

	<taskdef resource="cpptasks" classpath="${lib.loc}/cpptasks.jar" />

	<target name="usage">
		<echo message="" />
		<echo message="F*CSS Build Usage" />
		<echo message="-----------------------------------" />
		<echo message="" />
		<echo message="Available targets are:" />
		<echo message="" />
		<echo message="test          --> Build F*CSS SWC and run unit tests" />
		<echo message="asdoc         --> Build F*CSS SWC, test, and generate asdocs" />
		<echo message="package       --> Build F*CSS SWC, test, and create release zip" />
		<echo message="compile       --> Build F*CSS SWC" />
		<echo message="clean         --> Remove all folders created by build script" />
		<echo message="init          --> Clean and create build folders" />
		<echo message="" />
	</target>

	<!-- Clean Build and Report files -->
	<target name="clean">
		<!-- Remove all directories created during the build process -->
		<echo>[clean] Removing Build and Report directories</echo>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${report.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
			<fileset dir="${dist.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
		</delete>
		<echo>[clean] Build and Report directories removed</echo>
	</target>

	<!-- Create directories needed for the build process -->
	<target name="init" depends="clean">
		<echo>[init] Creating Bin and Report directories</echo>
		<mkdir dir="${bin.loc}" />
		<mkdir dir="${report.loc}" />
		<echo>[init] Bin and Report directories created</echo>
	</target>

	<!-- Run Unit Tests -->
	<target name="test" depends="init">
		<echo>[test] Running Unit Tests</echo>
		<!-- Compile TestRunner.mxml as a SWF -->

		<java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
			<arg value="${test.src.loc}/FCSSTest.mxml" />
			<arg value="-source-path=${main.src.loc}" />

			<!-- Flash those sweet legs. Blink and you'll miss 'em. -->
			<arg value="-output=${bin.loc}/TestRunner.swf" />
			<arg value="-default-size=307,136" />
			<arg value="-default-background-color=0x000000" />

			<!-- Include classes from SWCs in this folder, but only the ones we use. -->
			<arg value="-library-path+=${lib.loc}" />

			<!-- So true. -->
			<arg value="-incremental=true" />
			<arg value="-verbose-stacktraces=true" />
			<arg value="-headless-server=true" />
		</java>

		<!-- Execute TestRunner.swf as FlexUnit tests and publish reports -->
		<flexunit swf="bin/TestRunner.swf" toDir="${report.loc}" haltonfailure="false" verbose="true" localTrusted="true" failureproperty="flexunit.failed" />
		<!-- Generate readable JUnit-style reports -->
		<junitreport todir="${report.loc}">
			<fileset dir="${report.loc}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${report.loc}/html" />
		</junitreport>
		<echo>[test] Finished running Unit Tests</echo>

		<condition property="flexunit.passed">
			<and>
				<equals arg1="${flexunit.failed}" arg2="false" />
			</and>
		</condition>
	</target>

	<!-- Opens JUnit Report when test fails -->
	<target name="junitreport" depends="test">
		<exec executable="open">
			<arg line="-a ${browser} ${report.url}" />
		</exec>
	</target>
	
	<!-- Compile Release SWC -->
	<target name="compile" depends="junitreport" if="flexunit.passed">
		<echo>[compile] Compiling release SWC</echo>
		<echo>[compile] Using Flex SDK at: ${FLEX_HOME}</echo>

		<java jar="${FLEX_HOME}/lib/compc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
			<!-- Build our SWC with a versioned name. -->
			<arg value="-output=${bin.loc}/${project.name.versioned}.swc" />

			<!-- We want all the org package classes in the SWC being built. -->
			<arg value="-include-sources=${main.src.loc}/com" />

			<!-- Include classes from SWCs in this folder, but only the ones we use. -->
			<arg value="-library-path+=${lib.loc}" />

			<!-- Keep the magic alive. -->
			<arg value="-keep-as3-metadata+=Inject" />

			<!-- Boolean mosh pit! -->
			<arg value="-incremental=true" />
			<arg value="-static-link-runtime-shared-libraries=true" />
			<arg value="-verbose-stacktraces=true" />
			<arg value="-headless-server=true" />
		</java>

		<echo>[compile] Release SWC ${project.name.versioned}.swc created successfully</echo>
	</target>

	<!-- Build Documentation -->
	<target name="asdoc" depends="compile">
		<echo>[create-docs] Generating ASDOC documentation</echo>
		<tstamp>
			<format property="docgen.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour" />
		</tstamp>

		<java jar="${FLEX_HOME}/lib/asdoc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
			<arg line="-external-library-path ${lib.loc}" />
			<arg line="-doc-sources ${main.src.loc}" />
			<arg line="-source-path ${main.src.loc}" />
			<arg line="-output ${doc.loc}" />
			<arg line="-window-title 'F*CSS'" />
			<arg line="-main-title 'F*CSS'" />
			<arg line="-footer 'F*CSS - http://fcss.flashartofwar.com/ - Documentation generated at: ${docgen.time}'" />
			<arg line="-package com.flashartofwar.fcss.behaviors 'Behaviors to help add F*CSS functionality to your own Classes.'" />
			<arg line="-package com.flashartofwar.fcss.enum 'F*CSS constants and static values.'" />
			<arg line="-package com.flashartofwar.fcss.factories 'Factories for helping generate classes with style support.'" />
			<arg line="-package com.flashartofwar.fcss.managers 'Singletons for managing StyleSheets in your application.'" />
			<arg line="-package com.flashartofwar.fcss.objects 'Primitive Objects used by the library.'" />
			<arg line="-package com.flashartofwar.fcss.styles 'Core style class used by the library.'" />
			<arg line="-package com.flashartofwar.fcss.stylesheets 'StyleSheets used to parse and manage CSS.'" />
			<arg line="-package com.flashartofwar.fcss.utils 'Static utilities for helping apply styles to Objects and TextFields.'" />
		</java>

		<echo>[create-docs] ASDOC documentation generated successfully</echo>
	</target>

	<!-- Package the Build -->
	<target name="package" depends="test">
		<tstamp>
			<format property="touch.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour" />
		</tstamp>
		<!-- Assemble  -->
		<echo>[package] Packaging Release</echo>
		<mkdir dir="${dist.loc}" />
		<mkdir dir="${dist.loc}/bin" />
		<mkdir dir="${dist.loc}/src" />
		<copy file="${bin.loc}/${project.name.versioned}.swc" todir="${dist.loc}/bin" />
		<copy todir="${dist.loc}/src/org">
			<fileset dir="${main.src.loc}/org" />
		</copy>
		<!-- Copy README  -->
		<copy file="${template.loc}/README.tmpl" tofile="${dist.loc}/README" overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="date" value="${touch.time}" />
					<token key="rlversion" value="${fcss.var.num}" />
					<token key="releasename" value="${project.name.versioned}" />
				</replacetokens>
			</filterchain>
		</copy>
		<!-- Zip It  -->
		<zip destfile="${dist.loc}/${project.name.versioned}.zip">
			<fileset dir="${dist.loc}" />
		</zip>
		<!-- Clean Up  -->
		<delete file="${dist.loc}/${project.name.versioned}.swc" />
		<delete file="${dist.loc}/README" />
		<delete dir="${dist.loc}/bin" />
		<delete dir="${dist.loc}/src" />
		<echo>[package] Release packaged successfully</echo>
	</target>

</project>
